#!/usr/bin/python3
from __future__ import annotations
import argparse
import logging
import sys
import os
from arkimapslib.chef import Chef
from arkimapslib.recipes import Recipes
from arkimapslib.pantry import Pantry

map_params = {
    "subpage_map_projection": "cylindrical",
    "subpage_lower_left_longitude": -5.,
    "subpage_lower_left_latitude": 30.,
    "subpage_upper_right_longitude": 27.,
    "subpage_upper_right_latitude": 55.,
    # For an example of more, see skinnywms/plot/magics.py
}


def do_render(args):
    """
    Render all recipes for which inputs are available
    """
    # Tell magics where it should take its default styles from
    os.environ["MAGICS_STYLE_PATH"] = args.styles
    # Tell magics not to print noisy banners
    os.environ["MAGPLUS_QUIET"] = "1"

    pantry = Pantry(args.workdir)
    with pantry.reader() as reader:
        recipes = Recipes()
        recipes.load(pantry.session, "recipes")
        for recipe in recipes.recipes:
            for name, query in recipe.inputs:
                for md in reader.query_data(query):
                    source = md.to_python("source")
                    pathname = os.path.join(source["basedir"], source["file"], f"{source['offset']:06d}.grib")
                    trange = md.to_python("timerange")
                    dest = f"{recipe.name}+{trange['p1']}"
                    # TODO: don't pass pathname but fill inputs here, or
                    # alternatively let Recipe create dishes based on query
                    # results
                    dish = recipe.start_dish(pathname, dest)
                    recipe.prepare(Chef, dish)
                    print("Rendered", pathname, "to", dest)


def main():
    default_styles = os.path.abspath(os.path.join(os.path.dirname(sys.argv[0]), "styles"))
    if not os.path.isdir(default_styles):
        default_styles = "/usr/share/magics/styles/ecmwf"

    parser = argparse.ArgumentParser(description="Render model maps")
    parser.add_argument("--verbose", "-v", action="store_true", help="verbose output")
    parser.add_argument("--debug", action="store_true", help="debug output")
    parser.add_argument("--styles", metavar="dir", action="store", default=default_styles, help="styles directory")
    parser.add_argument("--document-recipes", action="store_true", help="generate recipes documentation")
    parser.add_argument("workdir", metavar="dir", help="directory with the files to render")

    args = parser.parse_args()

    # Setup logging
    FORMAT = "%(asctime)-15s %(levelname)s %(message)s"
    if args.debug:
        logging.basicConfig(level=logging.DEBUG, stream=sys.stderr, format=FORMAT)
    elif args.verbose:
        logging.basicConfig(level=logging.INFO, stream=sys.stderr, format=FORMAT)
    else:
        logging.basicConfig(level=logging.WARN, stream=sys.stderr, format=FORMAT)

    if args.document_recipes:
        recipes = Recipes()
        recipes.document(Chef, args.workdir)
    else:
        do_render(args)


if __name__ == "__main__":
    main()
