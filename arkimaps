#!/usr/bin/python3
# from __future__ import annotations
import argparse
import logging
import tarfile
import subprocess
import json
import io
import os
import sys
import time
from arkimapslib.cmdline import Command, Fail, Success
from arkimapslib.render import Renderer

log = logging.getLogger("arkimaps")


class LogCollector(logging.Handler):
    def __init__(self, *args, **kw):
        super().__init__(*args, **kw)
        self.entries = []

    def emit(self, record: logging.LogRecord):
        entry = {
            'ts': time.clock_gettime(time.CLOCK_REALTIME),
            'level': record.levelno,
            'msg': self.format(record),
            'name': record.name
        }
        self.entries.append(entry)


#
# Mixins used to compose the various command line actions
#

class RecipesMixin:
    """
    Command line options and code to load recipes into a kitchen
    """

    @classmethod
    def make_subparser(cls, subparsers):
        parser = super().make_subparser(subparsers)
        parser.add_argument("--recipes", metavar="dir", action="store", default="recipes",
                            help="directory with the YAML recipes")
        return parser

    def load_recipes(self):
        """
        Load recipes into the already created kitchen
        """
        self.kitchen.load_recipes(self.args.recipes)


class RenderMixin:
    """
    Command line options to control rendering of recipes
    """
    @classmethod
    def make_subparser(cls, subparsers):
        parser = super().make_subparser(subparsers)

        default_styles = os.path.abspath(os.path.join(os.path.dirname(sys.argv[0]), "styles"))
        if not os.path.isdir(default_styles):
            default_styles = "/usr/share/magics/styles/ecmwf"

        parser.add_argument("--styles", metavar="dir", action="store", default=default_styles,
                            help="styles directory. Default: styles (if existing) or /usr/share/magics/styles/ecmwf")
        parser.add_argument("--output", "-o", metavar="file.tar", action="store",
                            help="write rendered output to the given file. Default: write to stdout")

        return parser

    def __init__(self, *args, **kw):
        super().__init__(*args, **kw)

        # Collect log entries that we can then add to the output data
        # TODO: save intermediate log in workdir
        self.log_collector = LogCollector()
        self.log_collector.setLevel(logging.DEBUG)
        root_logger = logging.getLogger()
        root_logger.addHandler(self.log_collector)

    def get_styles_directory(self):
        """
        Return the directory where Magics styles are stored
        """
        return self.args.styles

    def open_output(self):
        if self.args.output:
            return tarfile.open(self.args.output, mode="w|")
        else:
            return tarfile.open(mode="w|", fileobj=sys.stdout.buffer)

    def render_tarball(self):
        """
        Render all recipes for which inputs are available, into a tarball
        """
        with self.open_output() as tarout:
            # List of products that should be rendered
            orders = self.kitchen.make_orders()

            renderer = Renderer(workdir=self.kitchen.workdir, styles_dir=self.get_styles_directory())
            for order in renderer.render(orders):
                log.info("Rendered %s to %s", order.recipe, order.basename)

                # Move the generated image to the output tar
                tarout.add(order.output, os.path.join(order.recipe, order.basename + ".png"))
                os.unlink(order.output)

            if self.log_collector.entries:
                with io.BytesIO(json.dumps(self.log_collector.entries, indent=1).encode()) as buf:
                    info = tarfile.TarInfo(name="log.json")
                    info.size = len(buf.getvalue())
                    tarout.addfile(tarinfo=info, fileobj=buf)

            # Let the Pantry store processing artifacts if it has any
            self.kitchen.pantry.store_processing_artifacts(tarout)


class WorkingKitchenMixin:
    """
    Mixin for commands that need a kitchen that can be used to generate
    products
    """
    @classmethod
    def make_subparser(cls, subparsers):
        parser = super().make_subparser(subparsers)
        parser.add_argument("--filter", metavar="{arkimet|eccodes}", default="arkimet",
                            help="backend to use to organise data into recipe inputs. Default: %(default)s")
        return parser

    def make_kitchen(self, workdir):
        if self.args.filter == "arkimet":
            from arkimapslib.kitchen import ArkimetKitchen
            return ArkimetKitchen(workdir)
        elif self.args.filter == "eccodes":
            from arkimapslib.kitchen import EccodesKitchen
            return EccodesKitchen(workdir)
        else:
            raise Fail(f"Unsupported value `{self.args.filter}` for --filter")


#
# Command line actions
#


class PrintArkiQuery(RecipesMixin, Command):
    """
    print an arkimet query to query data that can be used by the recipes found
    """
    NAME = "print-arki-query"

    def __init__(self, *args, **kw):
        super().__init__(*args, **kw)

        from arkimapslib.kitchen import ArkimetEmptyKitchen
        self.kitchen = ArkimetEmptyKitchen()

        self.load_recipes()

    def run(self):
        merged = None
        for r in self.kitchen.recipes.recipes:
            for name, inputs in r.inputs.items():
                for inp in inputs:
                    matcher = inp.arkimet_matcher
                    if matcher is None:
                        continue
                    if merged is None:
                        merged = matcher
                    else:
                        merged = merged.merge(matcher)
        print(merged)


class DocumentRecipes(RecipesMixin, Command):
    """
    generate recipes documentation
    """
    NAME = "document-recipes"

    def __init__(self, *args, **kw):
        super().__init__(*args, **kw)

        from arkimapslib.kitchen import EccodesEmptyKitchen
        self.kitchen = EccodesEmptyKitchen()

        self.load_recipes()

    def run(self):
        self.kitchen.document_recipes(self.args.recipes)


class Dispatch(RecipesMixin, WorkingKitchenMixin, Command):
    """
    do not render: dispatch into a working directory
    """
    @classmethod
    def make_subparser(cls, subparsers):
        parser = super().make_subparser(subparsers)
        parser.add_argument("workdir", metavar="dir", action="store",
                            help="working directory")
        return parser

    def __init__(self, *args, **kw):
        super().__init__(*args, **kw)
        self.kitchen = self.make_kitchen(self.args.workdir)
        self.load_recipes()

    def run(self):
        """
        Acquire input data
        """
        self.kitchen.pantry.fill()


class Render(RecipesMixin, RenderMixin, WorkingKitchenMixin, Command):
    """
    render data that was already dispatched
    """
    @classmethod
    def make_subparser(cls, subparsers):
        parser = super().make_subparser(subparsers)
        parser.add_argument("workdir", metavar="dir", action="store",
                            help="working directory")
        return parser

    def __init__(self, *args, **kw):
        super().__init__(*args, **kw)
        self.kitchen = self.make_kitchen(self.args.workdir)
        self.load_recipes()

    def run(self):
        """
        Render all recipes for which inputs are available
        """
        self.render_tarball()


class Preview(RecipesMixin, RenderMixin, WorkingKitchenMixin, Command):
    """
    generate the given product only, and display it with xdg-open
    """
    @classmethod
    def make_subparser(cls, subparsers):
        parser = super().make_subparser(subparsers)
        parser.add_argument("workdir", metavar="dir", action="store",
                            help="working directory")
        parser.add_argument("name", metavar="prod+step", action="store",
                            help="name of the product to preview")
        return parser

    def __init__(self, *args, **kw):
        super().__init__(*args, **kw)
        self.kitchen = self.make_kitchen(self.args.workdir)
        self.load_recipes()

    def run(self):
        """
        Generate the given product only, and preview it with xdg-open
        """
        name, step = self.args.name.split("+")
        step = int(step, 10)

        # Make an order
        order = self.kitchen.pantry.order(self.kitchen.recipes, name, step)

        # Prepare it
        renderer = Renderer(workdir=self.kitchen.workdir, styles_dir=self.get_styles_directory())
        renderer.render_one(order)
        log.info("Rendered %s to %s", order.recipe, order.basename)

        # Display it
        subprocess.run(["xdg-open", order.output], check=True)
        input("Press enter when done> ")
        os.unlink(order.output)


class Process(RecipesMixin, RenderMixin, WorkingKitchenMixin, Command):
    """
    draw maps based on GRIB data
    """

    @classmethod
    def make_subparser(cls, subparsers):
        parser = super().make_subparser(subparsers)
        parser.add_argument("--workdir", metavar="dir", action="store",
                            help="working directory. Default: a temporary one")
        return parser

    def __init__(self, *args, **kw):
        super().__init__(*args, **kw)

        # Set up working directory
        self.kitchen = self.make_kitchen(self.args.workdir)
        self.load_recipes()

    def run(self):
        # Acquire input data
        self.kitchen.pantry.fill()
        self.render_tarball()


class Postprocessor(RenderMixin, Command):
    def __init__(self, *args, **kw):
        super().__init__(*args, **kw)

        # Hardcode choices to be run as arkimet postprocessor

        # Pantry uses arkimet as a backend
        from arkimapslib.kitchen import ArkimetKitchen
        self.kitchen = ArkimetKitchen()

        # Recipes are loaded from a fixed directory
        # TODO: define where it is
        self.kitchen.load_recipes("recipes")

    def get_styles_directory(self):
        return "/usr/share/magics/styles/ecmwf"

    def open_output(self):
        return tarfile.open(mode="w|", fileobj=sys.stdout.buffer)

    def run(self):
        # Acquire input data
        self.kitchen.pantry.fill()
        self.render_tarball()


def main():
    parser = argparse.ArgumentParser(description="Render maps from model output.")
    parser.add_argument("-v", "--verbose", action="store_true", help="verbose output")
    parser.add_argument("--debug", action="store_true", help="verbose output")
    subparsers = parser.add_subparsers(help="sub-command help", dest="command")

    Process.make_subparser(subparsers)
    PrintArkiQuery.make_subparser(subparsers)
    DocumentRecipes.make_subparser(subparsers)
    Dispatch.make_subparser(subparsers)
    Render.make_subparser(subparsers)
    Preview.make_subparser(subparsers)

    args = parser.parse_args()

    if args.command is None:
        handler = Postprocessor(args)
    else:
        handler = args.handler(args)

    if getattr(handler, "kitchen", None) is not None:
        with handler.kitchen:
            res = handler.run()
    else:
        res = handler.run()
    if res is not None:
        sys.exit(res)


if __name__ == "__main__":
    try:
        main()
    except Fail as e:
        print(e, file=sys.stderr)
        sys.exit(1)
    except Success:
        pass
