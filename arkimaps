#!/usr/bin/python3
# from __future__ import annotations
from typing import List
import argparse
import datetime
import logging
import tarfile
import subprocess
import json
import io
import os
import sys
import time
from arkimapslib.cmdline import Command, Fail, Success
from arkimapslib.render import Renderer

# if TYPE_CHECKING:
from arkimapslib.flavours import Flavour

VERSION = "0.6"
SYSTEM_RECIPE_DIR = "/usr/share/arkimaps/recipes"

log = logging.getLogger("arkimaps")


class LogCollector(logging.Handler):
    def __init__(self, *args, **kw):
        super().__init__(*args, **kw)
        self.entries = []

    def emit(self, record: logging.LogRecord):
        entry = {
            'ts': time.clock_gettime(time.CLOCK_REALTIME),
            'level': record.levelno,
            'msg': self.format(record),
            'name': record.name
        }
        self.entries.append(entry)


#
# Mixins used to compose the various command line actions
#

class RecipesMixin:
    """
    Command line options and code to load recipes into a kitchen
    """

    @classmethod
    def make_subparser(cls, subparsers):
        parser = super().make_subparser(subparsers)
        default_recipes_dir = SYSTEM_RECIPE_DIR
        if os.path.isdir("recipes"):
            default_recipes_dir = os.path.abspath("recipes")
        parser.add_argument("--recipes", metavar="dir", action="store", default=default_recipes_dir,
                            help="directory with the YAML recipes (default: ./recipes (if existing)"
                                 " or " + SYSTEM_RECIPE_DIR)
        return parser

    def load_recipes(self):
        """
        Load recipes into the already created kitchen
        """
        self.kitchen.load_recipes([self.args.recipes])


class RenderMixin:
    """
    Command line options to control rendering of recipes
    """
    @classmethod
    def make_subparser(cls, subparsers):
        parser = super().make_subparser(subparsers)

        default_styles = os.path.abspath(os.path.join(os.path.dirname(sys.argv[0]), "styles"))
        if not os.path.isdir(default_styles):
            default_styles = "/usr/share/magics/styles/ecmwf"

        parser.add_argument("--styles", metavar="dir", action="store", default=default_styles,
                            help="styles directory. Default: ./styles (if existing) or /usr/share/magics/styles/ecmwf")
        parser.add_argument("--output", "-o", metavar="file.tar", action="store",
                            help="write rendered output to the given file. Default: write to stdout")
        parser.add_argument("--flavours", action="store", default="default",
                            help="comma-separated list of flavours to render. Default: \"%(default)s\"")

        return parser

    def __init__(self, *args, **kw):
        super().__init__(*args, **kw)

        # Collect log entries that we can then add to the output data
        # TODO: save intermediate log in workdir
        self.log_collector = LogCollector()
        self.log_collector.setLevel(logging.DEBUG)
        root_logger = logging.getLogger()
        root_logger.addHandler(self.log_collector)

    def get_styles_directory(self):
        """
        Return the directory where Magics styles are stored
        """
        return self.args.styles

    def open_output(self):
        if self.args.output:
            return tarfile.open(self.args.output, mode="w|")
        else:
            return tarfile.open(mode="w|", fileobj=sys.stdout.buffer)

    def parse_flavours(self) -> List[Flavour]:
        """
        Parse --flavours argument into a list of flavours
        """
        flavours = []
        for flavour_name in self.args.flavours.split(","):
            flavour = self.kitchen.flavours.get(flavour_name)
            if flavour is None:
                raise Fail(f"Flavour \"{flavour_name}\" not found")
            flavours.append(flavour)
        return flavours

    def render_tarball(self):
        """
        Render all recipes for which inputs are available, into a tarball
        """
        flavours = self.parse_flavours()

        with self.open_output() as tarout:
            for flavour in flavours:
                # List of products that should be rendered
                orders = self.kitchen.make_orders(flavour=flavour)

                renderer = Renderer(workdir=self.kitchen.workdir, styles_dir=self.get_styles_directory())
                for order in renderer.render(orders):
                    log.info("Rendered %s to %s", order.recipe_name, order.basename)

                    # Move the generated image to the output tar
                    tarout.add(
                        order.output,
                        os.path.join(os.path.join(order.relpath, order.basename) + ".png"))
                    os.unlink(order.output)

                if self.log_collector.entries:
                    with io.BytesIO(json.dumps(self.log_collector.entries, indent=1).encode()) as buf:
                        info = tarfile.TarInfo(name="log.json")
                        info.size = len(buf.getvalue())
                        tarout.addfile(tarinfo=info, fileobj=buf)

                # Let the Pantry store processing artifacts if it has any
                self.kitchen.pantry.store_processing_artifacts(tarout)


class WorkingKitchenMixin:
    """
    Mixin for commands that need a kitchen that can be used to generate
    products
    """
    @classmethod
    def make_subparser(cls, subparsers):
        parser = super().make_subparser(subparsers)
        parser.add_argument("--filter", metavar="{arkimet|eccodes}", default="arkimet",
                            help="backend to use to organise data into recipe inputs. Default: %(default)s")
        parser.add_argument("--grib", action="store_true",
                            help="read input as GRIB data instead of arkimet output. Implies --filter=eccodes")
        return parser

    def make_kitchen(self, workdir):
        if self.args.grib or self.args.filter == "eccodes":
            from arkimapslib.kitchen import EccodesKitchen
            return EccodesKitchen(workdir, grib_input=self.args.grib)
        elif self.args.filter == "arkimet":
            from arkimapslib.kitchen import ArkimetKitchen
            return ArkimetKitchen(workdir)
        else:
            raise Fail(f"Unsupported value `{self.args.filter}` for --filter")


#
# Command line actions
#


class PrintArkiQuery(RecipesMixin, Command):
    """
    print an arkimet query to query data that can be used by the recipes found
    """
    NAME = "print-arki-query"

    def __init__(self, *args, **kw):
        super().__init__(*args, **kw)

        from arkimapslib.kitchen import ArkimetEmptyKitchen
        self.kitchen = ArkimetEmptyKitchen()

        self.load_recipes()

    def run(self):
        merged = self.kitchen.get_merged_arki_query()
        print(merged)


class DocumentRecipes(RecipesMixin, Command):
    """
    generate recipes documentation
    """
    NAME = "document-recipes"

    @classmethod
    def make_subparser(cls, subparsers):
        parser = super().make_subparser(subparsers)
        parser.add_argument("--destdir", metavar="dir", action="store",
                            help="directory where documentation is written. It"
                                 " defaults to the recipes directory")
        return parser

    def __init__(self, *args, **kw):
        super().__init__(*args, **kw)

        from arkimapslib.kitchen import EccodesEmptyKitchen
        self.kitchen = EccodesEmptyKitchen()

        self.load_recipes()

    def run(self):
        dest = self.args.destdir
        if dest is None:
            dest = self.args.recipes
        if not os.path.isdir(dest):
            os.makedirs(dest)
        self.kitchen.document_recipes(dest)


class DumpRecipes(RecipesMixin, Command):
    """
    dump content parsed from recipes directory
    """
    NAME = "dump-recipes"

    def __init__(self, *args, **kw):
        super().__init__(*args, **kw)

        from arkimapslib.kitchen import EccodesEmptyKitchen
        self.kitchen = EccodesEmptyKitchen()

        self.load_recipes()

    def run(self):
        res_inputs = {}
        for name, inputs in self.kitchen.pantry.inputs.items():
            res_inputs[name] = []
            for idx, inp in enumerate(inputs, start=1):
                res_inputs[name].append(inp.to_dict())

        res = {}
        res["inputs"] = res_inputs
        json.dump(res, sys.stdout, indent=1)
        print()
        # TODO: self.recipes = Recipes()
        # TODO: self.flavours: Dict[str, Flavour] = {}


class Dispatch(RecipesMixin, WorkingKitchenMixin, Command):
    """
    do not render: dispatch into a working directory
    """
    @classmethod
    def make_subparser(cls, subparsers):
        parser = super().make_subparser(subparsers)
        parser.add_argument("workdir", metavar="dir", action="store",
                            help="working directory")
        return parser

    def __init__(self, *args, **kw):
        super().__init__(*args, **kw)
        self.kitchen = self.make_kitchen(self.args.workdir)
        self.load_recipes()

    def run(self):
        """
        Acquire input data
        """
        self.kitchen.pantry.fill()


class Render(RecipesMixin, RenderMixin, WorkingKitchenMixin, Command):
    """
    render data that was already dispatched
    """
    @classmethod
    def make_subparser(cls, subparsers):
        parser = super().make_subparser(subparsers)
        parser.add_argument("workdir", metavar="dir", action="store",
                            help="working directory")
        return parser

    def __init__(self, *args, **kw):
        super().__init__(*args, **kw)
        self.kitchen = self.make_kitchen(self.args.workdir)
        self.load_recipes()
        self.kitchen.pantry.rescan()

    def run(self):
        """
        Render all recipes for which inputs are available
        """
        self.render_tarball()


class Preview(RecipesMixin, RenderMixin, WorkingKitchenMixin, Command):
    """
    generate the given product only, and display it with xdg-open
    """
    @classmethod
    def make_subparser(cls, subparsers):
        parser = super().make_subparser(subparsers)
        parser.add_argument("-d", "--date", metavar="datetime", action="store",
                            help="render product at this reference time")
        parser.add_argument("workdir", metavar="dir", action="store",
                            help="working directory")
        parser.add_argument("name", metavar="prod[+step]", action="store",
                            help="name of the product to preview")
        return parser

    def __init__(self, *args, **kw):
        super().__init__(*args, **kw)
        self.kitchen = self.make_kitchen(self.args.workdir)
        self.load_recipes()
        self.kitchen.pantry.rescan()

    def run(self):
        """
        Generate the given product only, and preview it with xdg-open
        """
        if "+" in self.args.name:
            name, step = self.args.name.split("+")
            step = int(step, 10)
        else:
            name = self.args.name
            step = None

        if self.args.date is not None:
            res = subprocess.run(['date', '--date=' + self.args.date, '+%s'], text=True, capture_output=True)
            reftime = datetime.datetime.fromtimestamp(int(res.stdout))
        else:
            reftime = None

        flavours = self.parse_flavours()
        if len(flavours) != 1:
            raise Fail("Only 1 flavour is supported for preview")
        flavour = flavours[0]

        # Make an order
        order = self.kitchen.make_order(self.kitchen.recipes.get(name), flavour=flavour, step=step, reftime=reftime)

        # Prepare it
        renderer = Renderer(workdir=self.kitchen.workdir, styles_dir=self.get_styles_directory())
        order = renderer.render_one(order)
        log.info("Rendered %s to %s", order.recipe_name, order.basename)

        # Display it
        subprocess.run(["xdg-open", order.output], check=True)
        input("Press enter when done> ")
        os.unlink(order.output)


class Process(RecipesMixin, RenderMixin, WorkingKitchenMixin, Command):
    """
    draw maps based on GRIB data
    """

    @classmethod
    def make_subparser(cls, subparsers):
        parser = super().make_subparser(subparsers)
        parser.add_argument("--workdir", metavar="dir", action="store",
                            help="working directory. Default: a temporary one")
        return parser

    def __init__(self, *args, **kw):
        super().__init__(*args, **kw)

        # Set up working directory
        self.kitchen = self.make_kitchen(self.args.workdir)
        self.load_recipes()

    def run(self):
        # Acquire input data
        self.kitchen.pantry.fill()
        self.render_tarball()


def main():
    parser = argparse.ArgumentParser(description="Render maps from model output.")
    parser.add_argument("-v", "--verbose", action="store_true", help="verbose output")
    parser.add_argument("--debug", action="store_true", help="verbose output")
    parser.add_argument("--version", action="version", version="%(prog)s " + VERSION)
    # From Python 3.7+, use required=True
    subparsers = parser.add_subparsers(help="sub-command help", dest="command")

    Process.make_subparser(subparsers)
    PrintArkiQuery.make_subparser(subparsers)
    DocumentRecipes.make_subparser(subparsers)
    Dispatch.make_subparser(subparsers)
    Render.make_subparser(subparsers)
    Preview.make_subparser(subparsers)
    DumpRecipes.make_subparser(subparsers)

    args = parser.parse_args()

    if args.command is None:
        parser.print_help()
        return
    else:
        handler = args.handler(args)

    if getattr(handler, "kitchen", None) is not None:
        with handler.kitchen:
            res = handler.run()
    else:
        res = handler.run()
    if res is not None:
        sys.exit(res)


if __name__ == "__main__":
    try:
        main()
    except Fail as e:
        print(e, file=sys.stderr)
        sys.exit(1)
    except Success:
        pass
